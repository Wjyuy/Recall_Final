<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.boot.dao.RecallStaticDAO">

    <!-- DB 종류에 따라 DATE 포맷 처리용 SQL fragment -->
    <sql id="reportMonthExpression">
        <choose>
            <when test="dbType == 'mysql'">
                DATE_FORMAT(report_date, '%Y-%m')
            </when>
            <when test="dbType == 'postgresql'">
                TO_CHAR(report_date, 'YYYY-MM')
            </when>
            <otherwise>
                DATE_FORMAT(report_date, '%Y-%m') <!-- 기본은 MySQL -->
            </otherwise>
        </choose>
    </sql>

    <sql id="reportYearExpression">
        <choose>
            <when test="dbType == 'mysql'">
                YEAR(report_date)
            </when>
            <when test="dbType == 'postgresql'">
                EXTRACT(YEAR FROM report_date)
            </when>
            <otherwise>
                YEAR(report_date) <!-- 기본은 MySQL -->
            </otherwise>
        </choose>
    </sql>

    <!-- yearRange 분기처리 -->
    <sql id="yearRange">
        <where>
            <if test="start_year != null and end_year != null">
                <include refid="reportYearExpression"/> BETWEEN #{start_year} AND #{end_year}
            </if>
            <if test="start_year != null and end_year == null">
                <include refid="reportYearExpression"/> &gt;= #{start_year}
            </if>
            <if test="start_year == null and end_year != null">
                <include refid="reportYearExpression"/> &lt;= #{end_year}
            </if>
        </where>
    </sql>

    <!-- dateRange 분기처리: MySQL과 PostgreSQL -->
    <sql id="dateRange">
        <where>
            <choose>
                <when test="dbType == 'mysql'">
                    <if test="start_year != null and start_month != null and end_year != null and end_month != null">
                        report_date BETWEEN 
                        STR_TO_DATE(CONCAT(#{start_year}, '-', LPAD(#{start_month}, 2, '0'), '-01'), '%Y-%m-%d')
                        AND 
                        LAST_DAY(STR_TO_DATE(CONCAT(#{end_year}, '-', LPAD(#{end_month}, 2, '0'), '-01'), '%Y-%m-%d'))
                    </if>
                    <if test="start_year != null and start_month != null and (end_year == null or end_month == null)">
                        report_date &gt;= STR_TO_DATE(CONCAT(#{start_year}, '-', LPAD(#{start_month}, 2, '0'), '-01'), '%Y-%m-%d')
                    </if>
                    <if test="end_year != null and end_month != null and (start_year == null or start_month == null)">
                        report_date &lt;= LAST_DAY(STR_TO_DATE(CONCAT(#{end_year}, '-', LPAD(#{end_month}, 2, '0'), '-01'), '%Y-%m-%d'))
                    </if>
                    <if test="start_year == null and end_year == null and start_month == null and end_month == null">
                        1 = 1
                    </if>
                </when>

                <when test="dbType == 'postgresql'">
                    <if test="start_year != null and start_month != null and end_year != null and end_month != null">
                        report_date BETWEEN 
                        TO_DATE(CONCAT(#{start_year}, '-', LPAD(#{start_month}, 2, '0'), '-01'), 'YYYY-MM-DD')
                        AND 
                        (DATE_TRUNC('month', TO_DATE(CONCAT(#{end_year}, '-', LPAD(#{end_month}, 2, '0'), '-01'), 'YYYY-MM-DD') + INTERVAL '1 month') - INTERVAL '1 day')
                    </if>
                    <if test="start_year != null and start_month != null and (end_year == null or end_month == null)">
                        report_date &gt;= TO_DATE(CONCAT(#{start_year}, '-', LPAD(#{start_month}, 2, '0'), '-01'), 'YYYY-MM-DD')
                    </if>
                    <if test="end_year != null and end_month != null and (start_year == null or start_month == null)">
                        report_date &lt;= (DATE_TRUNC('month', TO_DATE(CONCAT(#{end_year}, '-', LPAD(#{end_month}, 2, '0'), '-01'), 'YYYY-MM-DD') + INTERVAL '1 month') - INTERVAL '1 day')
                    </if>
                    <if test="start_year == null and end_year == null and start_month == null and end_month == null">
                        1 = 1
                    </if>
                </when>

                <otherwise>
                    1 = 1
                </otherwise>
            </choose>
        </where>
    </sql>

    <!-- 예시: getDefectReportSummaryByMonth -->
    <select id="getDefectReportSummaryByMonth" resultType="com.boot.dto.DefectReportSummaryDTO">
        SELECT 
            <include refid="reportMonthExpression"/> AS report_month,
            COUNT(DISTINCT CASE WHEN car_manufacturer IN ('Hyundai', 'Kia', 'Genesis', 'Renault Samsung') THEN car_model END) AS domesticModelCount,
            COUNT(CASE WHEN car_manufacturer IN ('Hyundai', 'Kia', 'Genesis', 'Renault Samsung') THEN 1 END) AS domesticCount,
            COUNT(DISTINCT CASE WHEN car_manufacturer NOT IN ('Hyundai', 'Kia', 'Genesis', 'Renault Samsung') THEN car_model END) AS importedModelCount,
            COUNT(CASE WHEN car_manufacturer NOT IN ('Hyundai', 'Kia', 'Genesis', 'Renault Samsung') THEN 1 END) AS importedCount,
            COUNT(DISTINCT car_model) AS totalModelCount,
            COUNT(*) AS totalCount
        FROM defect_reports
        <include refid="dateRange"/>
        GROUP BY report_month
        ORDER BY report_month
    </select>

    <!-- 예시: getDefectReportSummaryByYear -->
    <select id="getDefectReportSummaryByYear" resultType="com.boot.dto.DefectReportSummaryDTO" parameterType="map">
        SELECT 
            <include refid="reportYearExpression"/> AS report_year,
            COUNT(DISTINCT CASE WHEN car_manufacturer IN ('Hyundai', 'Kia', 'Genesis', 'Renault Samsung') THEN car_model END) AS domesticModelCount,
            COUNT(CASE WHEN car_manufacturer IN ('Hyundai', 'Kia', 'Genesis', 'Renault Samsung') THEN 1 END) AS domesticCount,
            COUNT(DISTINCT CASE WHEN car_manufacturer NOT IN ('Hyundai', 'Kia', 'Genesis', 'Renault Samsung') THEN car_model END) AS importedModelCount,
            COUNT(CASE WHEN car_manufacturer NOT IN ('Hyundai', 'Kia', 'Genesis', 'Renault Samsung') THEN 1 END) AS importedCount,
            COUNT(DISTINCT car_model) AS totalModelCount,
            COUNT(*) AS totalCount
        FROM defect_reports
        <include refid="yearRange"/>
        GROUP BY report_year
        ORDER BY report_year
    </select>
    
    
    	<!-- API 저장시 중복 체크 -->
	<select id="checkDuplicate" resultType="int" parameterType="com.boot.dto.Defect_DetailsDTO">
		SELECT COUNT(*) 
		FROM defect_details
		WHERE product_name = #{product_name}
		AND model_name = #{model_name}
		AND manufacturer = #{manufacturer}
	</select>
	
	<!-- API 저장 -->
	<insert id="insertDefect" parameterType="com.boot.dto.Defect_DetailsDTO">
		INSERT INTO defect_details (
			product_name, manufacturer, manufacturing_period,
			model_name, recall_type, contact_info, additional_info, hash_code
		) VALUES (
			#{product_name}, #{manufacturer}, #{manufacturing_period},
			#{model_name}, #{recall_type}, #{contact_info}, #{additional_info}, #{hash_code}
		)
	</insert>
	
	<!-- API 갱신 -->
	<update id="updateDefect" parameterType="com.boot.dto.Defect_DetailsDTO">
		UPDATE defect_details
		SET manufacturing_period = #{manufacturing_period},
			recall_type = #{recall_type},
			contact_info = #{contact_info},
			additional_info = #{additional_info},
			hash_code = #{hash_code}
		WHERE product_name = #{product_name}
		AND model_name = #{model_name}
		AND manufacturer = #{manufacturer}
	</update>
	
	<!-- API 갱신시 비교를 위한 select문 -->
	<select id="findByKey" resultType="com.boot.dto.Defect_DetailsDTO" parameterType="com.boot.dto.Defect_DetailsDTO">
		SELECT *
		FROM defect_details
		WHERE product_name = #{product_name}
		AND model_name = #{model_name}
		AND manufacturer = #{manufacturer}
	</select>

	<select id="getAllRecalls" resultType="com.boot.dto.Defect_DetailsDTO">
		SELECT * FROM defect_details
	</select>

	<select id="findById" resultType="com.boot.dto.Defect_DetailsDTO">
		SELECT * FROM defect_details
		WHERE id = #{id}
	</select>
	
<!--	<select id="getListWithPaging" resultType="com.boot.dto.Defect_DetailsDTO">-->
<!--		SELECT * FROM defect_details-->
<!--		ORDER BY id-->
<!--		LIMIT #{amount} OFFSET #{offset}-->
<!--	</select>-->
	
<!--	<select id="getTotalCount" resultType="int">-->
<!--		SELECT COUNT(*) FROM defect_details-->
<!--	</select>-->
	
	<select id="getListWithPaging" resultType="com.boot.dto.Defect_DetailsDTO"> SELECT id, product_name, manufacturer, manufacturing_period, additional_info, model_name, recall_type, contact_info
        FROM defect_details WHERE 1=1
        <if test="type != null and keyword != null and keyword != ''">
            <choose>
                <when test="type == 'product_name'">
                    AND product_name LIKE CONCAT('%', #{keyword}, '%')
                </when>
                <when test="type == 'manufacturer'">
                    AND manufacturer LIKE CONCAT('%', #{keyword}, '%')
                </when>
                <when test="type == 'model_name'">
                    AND model_name LIKE CONCAT('%', #{keyword}, '%')
                </when>
                <when test="type == 'recall_type'">
                    AND recall_type LIKE CONCAT('%', #{keyword}, '%')
                </when>
                </choose>
        </if>
        ORDER BY id DESC
        LIMIT #{amount} OFFSET #{offset}
    </select>

    <select id="getTotalCount" resultType="int">
        SELECT COUNT(*)
        FROM defect_details WHERE 1=1
        <if test="type != null and keyword != null and keyword != ''">
            <choose>
                <when test="type == 'product_name'">
                    AND product_name LIKE CONCAT('%', #{keyword}, '%')
                </when>
                <when test="type == 'manufacturer'">
                    AND manufacturer LIKE CONCAT('%', #{keyword}, '%')
                </when>
                <when test="type == 'model_name'">
                    AND model_name LIKE CONCAT('%', #{keyword}, '%')
                </when>
                <when test="type == 'recall_type'">
                    AND recall_type LIKE CONCAT('%', #{keyword}, '%')
                </when>
            </choose>
        </if>
    </select>
	




</mapper>
